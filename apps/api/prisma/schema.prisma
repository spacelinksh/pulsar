// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Permission {
  id String @id @default(cuid())

  name        String  @unique
  description String?

  roles Role[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id String @id @default(cuid())

  name        String  @unique
  description String?

  permissions Permission[]
  users       User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

model User {
  id String @id @default(cuid())

  name          String
  document      String     @unique
  phone         String?
  email         String     @unique
  password      String
  avatar        String?
  token         String?    @unique
  status        UserStatus
  walletBalance Float?     @default(0)

  transferKeys TransferKey[]

  roleId String?
  role   Role?   @relation(fields: [roleId], references: [id])

  customers    Customer[]
  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TransactionType {
  DEPOSIT
  WITHDRAW
}

model Transaction {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  type        TransactionType
  amount      Float
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum CustomerStatus {
  ACTIVE
  INACTIVE
  USER
  PENDING
}

model Customer {
  id String @id @default(cuid())

  name     String
  email    String         @unique
  phone    String?
  document String         @unique
  status   CustomerStatus
  token    String?        @unique

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TransferKey {
  id String @id @default(cuid())

  key    String  @unique
  active Boolean @default(true)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
